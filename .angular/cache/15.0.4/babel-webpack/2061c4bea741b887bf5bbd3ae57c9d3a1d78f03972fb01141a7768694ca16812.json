{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst url = environment.apiUrl + \"/programs/\";\nexport let ProgramsService = /*#__PURE__*/(() => {\n  class ProgramsService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.programs = [];\n      this.programsUpdated = new Subject();\n    }\n    getPrograms() {\n      // const queryParams = `?pagesize=${workoutsPerPage}&page=${currentPage}`;\n      this.http.get(url).pipe(map(programData => {\n        return {\n          programs: programData.programs.map(program => {\n            return {\n              name: program.name,\n              description: program.description,\n              id: program._id,\n              creator: program.creator\n            };\n          })\n        };\n      })).subscribe(transformedProgramData => {\n        this.programs = transformedProgramData.programs;\n        this.programsUpdated.next({\n          programs: [...this.programs]\n        });\n      });\n    }\n    // getPrograms(){\n    //   return this.http.get('http://localhost:3000/api/programs')\n    // }\n    updateProgram(id) {\n      const program = this.programs;\n      console.error(program);\n      this.http.put(url + id, program).subscribe(response => {\n        console.error(response);\n        this.router.navigate([\"/programs\"]);\n      });\n    }\n    addProgram(name, description) {\n      // console.error(workout)\n      const programData = {\n        name: name,\n        date: description\n      };\n      // console.error(workoutData)\n      this.http.post(url, programData).subscribe(responseData => {\n        console.error('Program:', responseData);\n        this.router.navigate([\"/\"]);\n      });\n    }\n    getProgramUpdatedListener() {\n      return this.programsUpdated.asObservable();\n    }\n    getProgram(id) {\n      return this.http.get(url + id);\n    }\n    deleteProgram(programId) {\n      return this.http.delete(url + programId);\n    }\n  }\n  ProgramsService.ɵfac = function ProgramsService_Factory(t) {\n    return new (t || ProgramsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  ProgramsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProgramsService,\n    factory: ProgramsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProgramsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}