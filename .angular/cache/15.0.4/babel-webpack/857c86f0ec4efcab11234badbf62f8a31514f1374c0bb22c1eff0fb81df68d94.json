{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../clients.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/progress-spinner\";\nimport * as i10 from \"@angular/material/select\";\nimport * as i11 from \"@angular/material/core\";\nfunction ClientComponent_mat_spinner_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\nfunction ClientComponent_form_4_mat_error_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a first name. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ClientComponent_form_4_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a first name. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ClientComponent_form_4_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a first name. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ClientComponent_form_4_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please select a Role \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ClientComponent_form_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 3);\n    i0.ɵɵlistener(\"submit\", function ClientComponent_form_4_Template_form_submit_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onSavePost());\n    });\n    i0.ɵɵelementStart(1, \"mat-form-field\");\n    i0.ɵɵelement(2, \"input\", 4);\n    i0.ɵɵtemplate(3, ClientComponent_form_4_mat_error_3_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-form-field\");\n    i0.ɵɵelement(5, \"input\", 5);\n    i0.ɵɵtemplate(6, ClientComponent_form_4_mat_error_6_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"mat-form-field\");\n    i0.ɵɵelement(8, \"input\", 6);\n    i0.ɵɵtemplate(9, ClientComponent_form_4_mat_error_9_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"mat-form-field\")(11, \"mat-label\");\n    i0.ɵɵtext(12, \"Role\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"mat-select\", 7)(14, \"mat-option\", 8);\n    i0.ɵɵtext(15, \"Client\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"mat-option\", 9);\n    i0.ɵɵtext(17, \"Admin\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(18, ClientComponent_form_4_mat_error_18_Template, 2, 0, \"mat-error\", 0);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"h2\");\n    i0.ɵɵtext(20, \"Update Client!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"button\", 10);\n    i0.ɵɵtext(22, \"Save Client\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.form);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.form.get(\"firstName\").invalid);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.form.get(\"lastName\").invalid);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.form.get(\"email\").invalid);\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.form.get(\"role\").invalid);\n  }\n}\nconst _c0 = function () {\n  return [\"/clients\"];\n};\nexport let ClientComponent = /*#__PURE__*/(() => {\n  class ClientComponent {\n    constructor(route, clientService) {\n      this.route = route;\n      this.clientService = clientService;\n      this.isLoading = false;\n      this.mode = 'create';\n    }\n    ngOnInit() {\n      this.form = new FormGroup({\n        \"firstName\": new FormControl(null, {\n          validators: [Validators.required, Validators.minLength(3)]\n        }),\n        \"lastName\": new FormControl(null, {\n          validators: [Validators.required]\n        }),\n        // image: new FormControl(null, {\n        //   validators: [Validators.required],\n        //   asyncValidators: [mimeType]\n        // })\n        \"email\": new FormControl(null, {\n          validators: [Validators.required]\n        }),\n        \"role\": new FormControl(null, {\n          validators: [Validators.required]\n        })\n      });\n      this.route.paramMap.subscribe(ParamMap => {\n        console.error(ParamMap);\n        if (ParamMap.has('userId')) {\n          this.mode = 'edit';\n          this.userId = ParamMap.get('userId');\n          this.isLoading = true;\n          this.clientService.getUser(this.userId).subscribe(userData => {\n            this.isLoading = false;\n            this.user = {\n              id: userData._id,\n              firstName: userData.firstName,\n              lastName: userData.lastName,\n              email: userData.email,\n              role: userData.role,\n              personalTrainingClient: this.user.personalTrainingClient\n            };\n            console.error(this.user);\n            this.form.setValue({\n              'firstName': this.user.firstName,\n              'lastName': this.user.lastName,\n              'email': this.user.email,\n              'role': this.user.role\n            });\n          });\n        } else {\n          this.mode = 'create';\n          this.userId = null;\n        }\n      });\n    }\n    onSavePost() {\n      if (this.form.invalid) {\n        console.error(this.form);\n        return;\n      }\n      this.isLoading = true;\n      if (this.mode === 'create') {\n        this.clientService.addClient(this.form.value.firstName, this.form.value.lastName, this.form.value.email, this.form.value.role);\n      } else {\n        this.clientService.updateUser(this.userId, this.form.value.firstName, this.form.value.lastName, this.form.value.email, this.form.value.role);\n      }\n    }\n  }\n  ClientComponent.ɵfac = function ClientComponent_Factory(t) {\n    return new (t || ClientComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ClientsService));\n  };\n  ClientComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ClientComponent,\n    selectors: [[\"app-client\"]],\n    decls: 5,\n    vars: 4,\n    consts: [[4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 1, \"m-2\", 3, \"routerLink\"], [3, \"formGroup\", \"submit\", 4, \"ngIf\"], [3, \"formGroup\", \"submit\"], [\"matInput\", \"\", \"formControlName\", \"firstName\", \"type\", \"text\", \"placeholder\", \"First Name\"], [\"matInput\", \"\", \"formControlName\", \"lastName\", \"type\", \"text\", \"placeholder\", \"last Name \"], [\"matInput\", \"\", \"formControlName\", \"email\", \"type\", \"text\", \"placeholder\", \"Email\"], [\"formControlName\", \"role\"], [\"value\", \"client\"], [\"value\", \"admin\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", \"type\", \"submit\"]],\n    template: function ClientComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\");\n        i0.ɵɵtemplate(1, ClientComponent_mat_spinner_1_Template, 1, 0, \"mat-spinner\", 0);\n        i0.ɵɵelementStart(2, \"button\", 1);\n        i0.ɵɵtext(3, \"Back\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, ClientComponent_form_4_Template, 23, 5, \"form\", 2);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(3, _c0));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n      }\n    },\n    dependencies: [i3.NgIf, i1.RouterLink, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i5.MatInput, i6.MatFormField, i6.MatLabel, i6.MatError, i7.MatCard, i8.MatButton, i9.MatProgressSpinner, i10.MatSelect, i11.MatOption]\n  });\n  return ClientComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}