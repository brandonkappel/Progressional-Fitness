{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst url = environment.apiUrl + \"/user/\";\nexport let ClientsService = /*#__PURE__*/(() => {\n  class ClientsService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.users = [];\n      this.usersUpdated = new Subject();\n    }\n    getUsers(usersPerPage, currentPage) {\n      const queryParams = `?pagesize=${usersPerPage}&page=${currentPage}`;\n      this.http.get(url + queryParams).pipe(map(userData => {\n        return {\n          users: userData.users.map(user => {\n            return {\n              firstName: user.firstName,\n              lastName: user.lastName,\n              role: user.role,\n              email: user.email,\n              id: user._id,\n              creator: user.creator\n            };\n          }),\n          maxUsers: userData.maxUsers\n        };\n      })).subscribe(transformedUserData => {\n        this.users = transformedUserData.users;\n        this.usersUpdated.next({\n          users: [...this.users],\n          userCount: transformedUserData.maxUsers\n        });\n      });\n    }\n    updateUser(id, firstName, lastName, email, role, personalTrainingClient) {\n      const user = {\n        id: id,\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        role: role,\n        personalTrainingClient: personalTrainingClient\n      };\n      console.error(user);\n      this.http.put(url + id, user).subscribe(response => {\n        console.error(response);\n        this.router.navigate([\"/clients\"]);\n      });\n    }\n    // addClient(firstName: string, lastName: string, email: string, role: string) {\n    //   const clientData = {firstName: firstName, lastName: lastName, email:email, role: role}\n    //   this.http.post<{ message: string, userId: any }>(url+'newUser', clientData)\n    //     .subscribe((responseData) => {\n    //       console.error(responseData)\n    //       this.router.navigate([\"/\"])\n    //     });\n    // }\n    addClient(client) {\n      // const clientData = {firstName: firstName, lastName: lastName, email:email, role: role}\n      return this.http.post(url + 'newUser', client);\n      // .subscribe((responseData) => {\n      //   console.error(responseData)\n      //   this.router.navigate([\"/\"])\n      // });\n    }\n\n    getUserUpdatedListener() {\n      return this.usersUpdated.asObservable();\n    }\n    getUser(id) {\n      return this.http.get(url + id);\n    }\n    deletePost(userId) {\n      return this.http.delete(url + userId);\n    }\n  }\n  ClientsService.ɵfac = function ClientsService_Factory(t) {\n    return new (t || ClientsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  ClientsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClientsService,\n    factory: ClientsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ClientsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}