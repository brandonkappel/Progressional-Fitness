{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/snack-bar\";\nconst url = environment.apiUrl + \"/user/\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, snackBar) {\n      this.http = http;\n      this.router = router;\n      this.snackBar = snackBar;\n      this.isAuthenticated = false;\n      this.isAdmin = false;\n      this.authStatusListener = new Subject();\n      this.adminStatusListener = new Subject();\n    }\n    getToken() {\n      return this.token;\n    }\n    getIsAuth() {\n      return this.isAuthenticated;\n    }\n    getUserId() {\n      return this.userId;\n    }\n    getIsAdmin() {\n      return this.isAdmin;\n    }\n    createUser(firstName, lastName, email, password) {\n      const authData = {\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        password: password\n      };\n      return this.http.post(url + \"signup\", authData).subscribe(response => {\n        console.error(response);\n        this.snackBar.open('An Email was sent to ' + email + ' with a verification code', 'Okay', {\n          verticalPosition: 'top'\n        });\n        this.router.navigate(['verify']);\n      }, error => {\n        console.error(error);\n        this.authStatusListener.next(false);\n      });\n    }\n    verify(code) {\n      this.http.get(url + \"verify/\" + code).subscribe(response => {\n        console.error('verify res:', response);\n        if (response) {\n          console.error('youre In!');\n          this.snackBar.open('Successfully Verified', '', {\n            duration: 2000,\n            verticalPosition: 'top'\n          });\n          this.router.navigate(['login']);\n        }\n      });\n    }\n    resendCode(email) {\n      this.http.get(url + \"resendCode/\" + email).subscribe(response => {\n        console.error('Resend Code', response);\n        if (response) {\n          console.error('sent');\n          this.snackBar.open(response.message, '', {\n            duration: 3000,\n            verticalPosition: 'top'\n          });\n        }\n      });\n    }\n    logIn(email, password) {\n      console.error('here?');\n      const authData = {\n        email: email,\n        password: password\n      };\n      this.http.post(url + \"login\", authData).subscribe(response => {\n        console.error('Log In:', response);\n        const token = response.token;\n        this.token = token;\n        if (token && response.active) {\n          const expiresInDuration = response.expiresIn;\n          const role = response.role;\n          this.user = response.user;\n          this.setAuthTimer(expiresInDuration);\n          this.isAuthenticated = true;\n          this.userId = response.userId;\n          if (role == 'admin') {\n            console.error('ADMIN');\n            this.isAdmin = true;\n            this.adminStatusListener.next(true);\n          }\n          console.error('AFTER ADMIN ');\n          this.authStatusListener.next(true);\n          const now = new Date();\n          const expirationDate = new Date(now.getTime() + expiresInDuration * 1000);\n          this.saveAuthData(token, expirationDate, this.userId, role, this.user);\n          // this.getUser()\n          this.router.navigate(['fitness']);\n        } else {\n          this.router.navigate(['verify']);\n          console.error('not active');\n        }\n      }, error => {\n        this.authStatusListener.next(false);\n      });\n    }\n    getUser() {\n      this.http.get(url + this.userId).subscribe(user => {\n        this.user = {\n          id: user._id,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          email: user.email,\n          role: user.role\n        };\n        if (user.role == 'admin') {\n          console.error('ADMIN');\n          this.isAdmin = true;\n          this.adminStatusListener.next(true);\n        }\n      });\n    }\n    // getUser(id: string) {\n    // return  this.http.get<{ _id: string, firstName: string, lastName: string, email: string, role: string }>(\"http://localhost:3000/api/user/\" + id)\n    // }\n    autoAuthUser() {\n      const authInformation = this.getAuthData();\n      if (!authInformation) {\n        return;\n      }\n      const now = new Date();\n      const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\n      if (expiresIn > 0) {\n        this.token = authInformation.token;\n        this.isAuthenticated = true;\n        this.userId = authInformation.userId;\n        if (authInformation.userRole == 'admin') {\n          // console.error('ADMIN')\n          this.isAdmin = true;\n          this.adminStatusListener.next(true);\n        }\n        this.setAuthTimer(expiresIn / 1000);\n        this.authStatusListener.next(true);\n      }\n    }\n    logout() {\n      this.token = null;\n      this.isAuthenticated = false;\n      this.isAdmin = false;\n      this.authStatusListener.next(false);\n      this.adminStatusListener.next(false);\n      clearTimeout(this.tokenTimer);\n      this.clearAuthData;\n      this.userId = null;\n      this.router.navigate(['/']);\n    }\n    setAuthTimer(duration) {\n      // console.error(\"setting timer: \" + duration)\n      this.tokenTimer = setTimeout(() => {\n        this.logout();\n      }, duration * 1000);\n    }\n    saveAuthData(token, expirationDate, userId, role, user) {\n      localStorage.setItem('token', token);\n      localStorage.setItem('expiration', expirationDate.toISOString());\n      localStorage.setItem('userId', userId);\n      localStorage.setItem('userRole', role);\n      localStorage.setItem('user', user);\n    }\n    clearAuthData() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('expiration');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('user');\n    }\n    getAuthData() {\n      const token = localStorage.getItem('token');\n      const expirationDate = localStorage.getItem('expiration');\n      const userId = localStorage.getItem('userId');\n      const userRole = localStorage.getItem('userRole');\n      const user = localStorage.getItem('user');\n      if (!token || !expirationDate) {\n        return;\n      }\n      return {\n        token: token,\n        expirationDate: new Date(expirationDate),\n        userId: userId,\n        userRole: userRole,\n        user: user\n      };\n    }\n    getAuthStatusListener() {\n      return this.authStatusListener.asObservable();\n    }\n    getAdminStatusListener() {\n      return this.adminStatusListener.asObservable();\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatSnackBar));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}