{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst url = environment.apiUrl + \"/posts/\";\nexport let PostsService = /*#__PURE__*/(() => {\n  class PostsService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.posts = [];\n      this.postsUpdated = new Subject();\n    }\n    getPosts(postsPerPage, currentPage) {\n      const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;\n      this.http.get(url + queryParams).pipe(map(postData => {\n        return {\n          posts: postData.posts.map(post => {\n            return {\n              title: post.title,\n              content: post.content,\n              id: post._id,\n              creator: post.creator\n            };\n          }),\n          maxPosts: postData.maxPosts\n        };\n      })).subscribe(transformedPostData => {\n        this.posts = transformedPostData.posts;\n        this.postsUpdated.next({\n          posts: [...this.posts],\n          postCount: transformedPostData.maxPosts\n        });\n      });\n    }\n    getPostUpdatedListener() {\n      return this.postsUpdated.asObservable();\n    }\n    getPost(id) {\n      return this.http.get(url + id);\n    }\n    addPost(post) {\n      console.error(post);\n      // console.error(title, content)\n      //need to fix adding image, reference lectur 77-79\n      const postData = new FormData();\n      // postData.append(\"title\", title)\n      // postData.append(\"content\", content)\n      // postData.append(\"image\", image, title)\n      // const post ={title: title, content: content}\n      console.error(post);\n      console.error(postData);\n      this.http.post(url, post).subscribe(responseData => {\n        console.error('POST:', responseData);\n        this.router.navigate([\"/\"]);\n      });\n    }\n    updatePost(id, title, content) {\n      const post = {\n        id: id,\n        title: title,\n        content: content,\n        creator: null\n      };\n      this.http.put(url + id, post).subscribe(response => {\n        this.router.navigate([\"/\"]);\n      });\n    }\n    deletePost(postId) {\n      return this.http.delete(url + postId);\n    }\n  }\n  PostsService.ɵfac = function PostsService_Factory(t) {\n    return new (t || PostsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  PostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsService,\n    factory: PostsService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}