{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst url = environment.apiUrl + \"/workouts/\";\nconst itemUrl = environment.apiUrl + \"/workoutItems/\";\nexport let WorkoutsService = /*#__PURE__*/(() => {\n  class WorkoutsService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.workouts = [];\n      this.workoutsUpdated = new Subject();\n      this.workoutItems = [];\n    }\n    getWorkouts(workoutsPerPage, currentPage, type, client, program) {\n      const queryParams = `?pagesize=${workoutsPerPage}&page=${currentPage}&type=${type}&client=${client}&program=${program}`;\n      this.http.get(url + queryParams).pipe(map(workoutData => {\n        // console.error(workoutData)\n        return {\n          workouts: workoutData.workouts.map(workout => {\n            return {\n              name: workout.name,\n              date: workout.date,\n              creator: workout.creator,\n              client: workout.client,\n              program: workout.program,\n              id: workout._id\n            };\n          }),\n          maxWorkouts: workoutData.maxWorkouts\n        };\n      })).subscribe(transformedWorkoutData => {\n        this.workouts = transformedWorkoutData.workouts;\n        this.workoutsUpdated.next({\n          workouts: [...this.workouts],\n          workoutCount: transformedWorkoutData.maxWorkouts\n        });\n      });\n    }\n    getWorkoutItems(id) {\n      return this.http.get(itemUrl + id).pipe(map(itemData => {\n        return {\n          workoutItems: itemData.workoutItem.map(item => {\n            return {\n              name: item.name,\n              description: item.description,\n              comments: item.comments\n            };\n          })\n        };\n      })).subscribe(transformedItemData => {\n        this.workoutItems = transformedItemData.workoutItems;\n      });\n    }\n    getWorkoutI(id) {\n      return this.http.get(itemUrl + id);\n    }\n    updateWorkout(id, workout, workoutItem) {\n      const w = {\n        id: id,\n        name: workout.name,\n        date: workout.date,\n        creator: null,\n        client: workout.client,\n        program: workout.program\n      };\n      this.http.put(url + id, w).subscribe(response => {\n        console.error(response);\n        console.error(workoutItem);\n        let wItem = [];\n        if (workoutItem && workoutItem[0].id != '') {\n          workoutItem.forEach(item => {\n            wItem.push({\n              _id: item._id,\n              name: item.name,\n              description: item.description,\n              comments: item.comments,\n              workout: id\n            });\n          });\n          console.error('wItem', wItem);\n          wItem.forEach(item => {\n            let newItems = [];\n            let existingItems = [];\n            if (item._id == '') {\n              delete item._id;\n              newItems.push(item);\n              this.addWorkoutItem(newItems);\n            } else {\n              existingItems.push(item);\n              this.updateWorkoutItem(existingItems);\n            }\n          });\n        }\n        // this.router.navigate([\"/workouts\"])\n      });\n    }\n\n    updateWorkoutItem(item) {\n      console.error(item);\n      this.http.put(itemUrl, item).subscribe(response => {\n        console.error('ITEM UPDATED', response);\n      });\n    }\n    addWorkout(workout, workoutItem) {\n      console.error(workout);\n      // const workoutData = {name: name, date: date, user: user, program: program}\n      // console.error(workoutData)\n      this.http.post(url, workout).subscribe(responseData => {\n        console.error('Workout:', responseData);\n        let wItem = [];\n        workoutItem.forEach(item => {\n          wItem.push({\n            name: item.name,\n            description: item.description,\n            comments: item.comments,\n            workout: responseData.workoutId\n          });\n        });\n        console.error('wItem', wItem);\n        this.addWorkoutItem(wItem);\n        this.router.navigate([\"/workouts\"]);\n      });\n    }\n    addWorkoutItem(workoutItem) {\n      console.error('ADDED WORKOUT ITEM :', workoutItem);\n      // const itemData = {name: name, description: description, comments: comments, workout: workout}\n      // console.error(itemData)\n      this.http.post(itemUrl, workoutItem).subscribe(response => {\n        console.error('workout Item RETURN:', response);\n      });\n    }\n    getWorkoutUpdatedListener() {\n      return this.workoutsUpdated.asObservable();\n    }\n    getWorkout(id) {\n      return this.http.get(url + id);\n    }\n    getMyWorkouts(id) {\n      return this.http.get(url + \"/myWorkouts/\" + id);\n    }\n    getPersonalWorkouts(id) {\n      return this.http.get(url + \"/personalWorkouts/\" + id);\n    }\n    getProgramWorkouts(id) {\n      console.error('program id:', id);\n      return this.http.get(url + \"/programWorkouts/\" + id);\n    }\n    deleteWorkout(workoutId) {\n      return this.http.delete(url + workoutId);\n    }\n    deleteWorkoutItem(itemId) {\n      return this.http.delete(itemUrl + itemId);\n    }\n  }\n  WorkoutsService.ɵfac = function WorkoutsService_Factory(t) {\n    return new (t || WorkoutsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  WorkoutsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WorkoutsService,\n    factory: WorkoutsService.ɵfac,\n    providedIn: 'root'\n  });\n  return WorkoutsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}